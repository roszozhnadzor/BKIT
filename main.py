import logging
from aiogram import Bot, types
from aiogram.types.message import  ContentType
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.utils.markdown import text, bold, italic 
from aiogram.types import ParseMode, user
from aiogram.types import CallbackQuery
from features.steps.config import MY_ID, TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from keyboards import keyboard
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup



import logging

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
#dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(format=u'%(filename)+13s [ LINE:%(lineno)-4s] %(levelname)-8s [%(asctime)s] %(message)s',
    level=logging.INFO)

# –î–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (–≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
class user():
  name_user = ""
  fname_user = ""
  tel_user = ""

# –î–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π 
class reg(StatesGroup):
    name =  State()
    fname = State()
    tel = State()

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'],state = "*")
async def process_start_command(message: types.Message):
        await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∏–Ω–∏–ë–æ—Ç!", reply_markup=keyboard)
        await bot.send_message(MY_ID, "start+1")

# –Ω–∞–∂–∞—Ç–∏–µ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(text_contains="enter", state="*")
async def process_enter_command(call:CallbackQuery,state: FSMContext):
         await call.bot.send_message(call.from_user.id,'‚≠ê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ ‚≠ê')
         await call.message.answer(text='üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üí¨')
         await reg.name.set()
         
         
# –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(state=reg.name, content_types=types.ContentTypes.TEXT)
async def fname_step(message: types.Message, state: FSMContext):
    if any(map(str.isdigit, message.text)):
        await message.reply("‚úã –í—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏–º—è —Å–Ω–æ–≤–∞ ‚úã")
        return
    await state.update_data(name_user=message.text.title())
    user.name_user = message.text
    await message.answer(text='üí¨ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é üí¨')
    await reg.fname.set()
    


@dp.message_handler(state=reg.fname, content_types=types.ContentTypes.TEXT)
async def age_step(message: types.Message, state: FSMContext):
    if any(map(str.isdigit, message.text)):
        await message.reply("‚úã –í—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏—é —Å–Ω–æ–≤–∞ ‚úã")
        return
    await message.answer(text="‚òéÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚òéÔ∏è            (–±–µ–∑ +)")
    await state.update_data(fname_user=message.text.title())
    user.fname_user=message.text
    await reg.tel.set()
    await user.tel_user.set()


@dp.message_handler(state=reg.tel, content_types=types.ContentTypes.TEXT)
async def res_step(message: types.Message, state: FSMContext):
    if not any(map(str.isdigit, message.text)):
        await message.reply(text="‚úã –í—ã –æ—à–∏–±–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω —Å–Ω–æ–≤–∞ ‚úã")
        return
    await state.update_data(tel_user=message.text.lower())
    user_data = await state.get_data()
    user.tel_user = message.text
    await state.finish()
    await message.answer(text="‚≠ê –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–Ω–µ—Å–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚≠ê")
        

# –Ω–∞–∂–∞—Ç–∏–µ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(text_contains="print")
async def process_print_command(call:CallbackQuery,state: FSMContext):
         await call.bot.send_message(call.from_user.id,'‚≠ê –†–∞—Å–ø–µ—á–∞—Ç–∫–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö               /print‚≠ê')
        
# –∑–∞–ø—É—Å–∫ –ø–µ—á–∞—Ç–∏
@dp.message_handler(commands = ["print"], )
async def printer(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id, text(
                text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,', user.name_user),
                text('–¢–µ–ª:', user.tel_user),
                sep='\n',
            ))

# –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@dp.message_handler(commands=['help'], state="*")
async def process_help_command(message: types.Message):
    await message.reply("–°–ø–∏—Å–æ–∫ –∏–º–µ—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥: \n/start - –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —É–≤–∏–¥–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞\n/print - —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ\n/help - –ø–æ–º–æ—â—å\n")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(msg: types.Message):
    message_text = text(('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :('),
                        italic('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help'), )
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)

# –∫–æ–Ω–µ—Ü
async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()

if __name__ == '__main__':
    executor.start_polling(dp,on_shutdown=shutdown)


